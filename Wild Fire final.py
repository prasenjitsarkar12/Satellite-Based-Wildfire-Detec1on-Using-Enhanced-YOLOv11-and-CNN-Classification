# -*- coding: utf-8 -*-
"""forest_fire final.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_PLUNvC0FLS0-B8jT7O375dzVKfcoje1

### Extracted Dataset
"""

!unrar x /content/drive/MyDrive/Project/forest_Dataset.rar /content/drive/MyDrive/Project

"""### Importing Libraries"""

from google.colab import drive
drive.mount('/content/drive')

import os
import numpy as np
import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
from tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint
from sklearn.preprocessing import LabelEncoder

"""### Loading the Dataset"""

base_path = "/content/drive/MyDrive/Project/forest_Dataset"

"""### Resizing The Image Size"""

# Image size and batch size
IMG_SIZE = (224, 224)
BATCH_SIZE = 512

"""### Using Data Augumentation Techniques"""

# ==== DATA AUGMENTATION & LOADING ====
train_datagen = ImageDataGenerator(
    rescale=1./255

)

val_test_datagen = ImageDataGenerator(rescale=1./255)

# Train generator
train_generator = train_datagen.flow_from_directory(
    os.path.join(base_path, "Train"),
    target_size=IMG_SIZE,
    batch_size=BATCH_SIZE,
    class_mode='binary',
    shuffle=True
)

# Validation generator
val_generator = val_test_datagen.flow_from_directory(
    os.path.join(base_path, "Validation"),
    target_size=IMG_SIZE,
    batch_size=BATCH_SIZE,
    class_mode='binary',
    shuffle=False
)

# Test generator
test_generator = val_test_datagen.flow_from_directory(
    os.path.join(base_path, "Test"),
    target_size=IMG_SIZE,
    batch_size=BATCH_SIZE,
    class_mode='binary',
    shuffle=False
)

"""### Create a CNN Model Architecture"""

# ==== CNN MODEL ====
model = Sequential([
    Conv2D(32, (3, 3), activation='relu', input_shape=(224, 224, 3)),
    MaxPooling2D(pool_size=(2, 2)),

    Conv2D(64, (3, 3), activation='relu'),
    MaxPooling2D(pool_size=(2, 2)),

    Conv2D(128, (3, 3), activation='relu'),
    MaxPooling2D(pool_size=(2, 2)),

    Flatten(),
    Dense(128, activation='relu'),
    Dropout(0.5),
    Dense(1, activation='sigmoid')  # Binary classification
])

# Compile the model
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# ==== CALLBACKS ====
early_stop = EarlyStopping(monitor='val_accuracy', patience=5, restore_best_weights=True)
checkpoint = ModelCheckpoint("best_fire_model.h5", save_best_only=True)

"""### Training The Model"""

# ==== TRAIN THE MODEL ====
history = model.fit(
    train_generator,
    steps_per_epoch=train_generator.samples // train_generator.batch_size,
    validation_data=val_generator,
    validation_steps=val_generator.samples // val_generator.batch_size,
    epochs=5,
    callbacks=[early_stop, checkpoint]
)

# ==== EVALUATE ON TEST DATA ====
loss, accuracy = model.evaluate(test_generator)
print(f"\nâœ… Test Accuracy: {accuracy * 100:.2f}%")

# ==== SAVE FINAL MODEL ====
model.save("/content/drive/MyDrive/Project/final_forest_fire_cnn_model.h5")
print("âœ… Final model saved.")

"""### Saving The Model"""

# ==== SAVE FINAL MODEL ====
model.save("/content/drive/MyDrive/Project/final_forest_fire_cnn_model.h5")
print("âœ… Final model saved.")

"""### Evaluate The Model"""

loss, accuracy = model.evaluate(test_generator)
print(f"\nâœ… Test Accuracy: {accuracy * 100:.2f}%")

"""### Confusion Matrix And Classification Report"""

from sklearn.metrics import classification_report, confusion_matrix
import seaborn as sns
import matplotlib.pyplot as plt

# === GET TRUE LABELS AND PREDICTIONS ===
# Predict probabilities
y_pred_probs = model.predict(test_generator)

# Convert to binary predictions (0 or 1)
y_pred = (y_pred_probs >= 0.5).astype(int).reshape(-1)
# True labels
y_true = test_generator.classes

# === CONFUSION MATRIX ===
cm = confusion_matrix(y_true, y_pred)
labels = list(test_generator.class_indices.keys())

plt.figure(figsize=(6, 4))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=labels, yticklabels=labels)
plt.xlabel('Predicted Label')
plt.ylabel('True Label')
plt.title('Confusion Matrix')
plt.show()

# === CLASSIFICATION REPORT ===
report = classification_report(y_true, y_pred, target_names=labels)
print("ðŸ“Š Classification Report:\n")
print(report)

"""### Prediction"""

import numpy as np
import tensorflow as tf
from tensorflow.keras.preprocessing import image
import matplotlib.pyplot as plt

# === Load trained model ===
model = tf.keras.models.load_model("/content/drive/MyDrive/Project/final_forest_fire_cnn_model.h5")

# === Set the path to the image you want to test ===
image_path = input("Enter the Path: ")
# === Preprocess the image ===
img = image.load_img(image_path, target_size=(224, 224))  # Resize
img_array = image.img_to_array(img)
img_array = np.expand_dims(img_array, axis=0)  # Convert to shape (1, 224, 224, 3)
img_array = img_array / 255.0  # Normalize

# === Predict ===
prediction_score = model.predict(img_array)[0][0]

# === Decide label based on prediction score ===
predicted_label = "No Fire ðŸ”¥" if prediction_score >= 0.5 else "Fire ðŸŒ²"

# === Show the image and result ===
plt.imshow(img)
plt.axis('off')
plt.title(f"{predicted_label}\nScore: {prediction_score:.4f}")
plt.show()

# === Print prediction ===
print(f"âœ… Predicted Label: {predicted_label}")
print(f"ðŸ“Š Raw Prediction Score: {prediction_score:.4f}")

"""### Creating  a Yolo Model ###

### Installing Libraries
"""

!pip install ultralytics

"""### Extracted Datset"""

!unzip '/content/drive/MyDrive/Project/COS473 Forest Fires New.v3i.yolov11.zip' -d'/content/drive/MyDrive/Project'

import locale
locale.getpreferredencoding = lambda: "UTF-8"

"""### Creating Yolo v11 Model"""

from ultralytics import YOLO

model=YOLO('yolo11n.pt')

"""### Training The Model"""

model.train(data="/content/drive/MyDrive/Project/data.yaml",epochs=150,batch=64,imgsz=640)

from ultralytics import YOLO

# Load model from Google Drive checkpoint
model = YOLO("/content/drive/MyDrive/Project/last.pt")

# Train and save results in Google Drive
model.train(
    data="/content/drive/MyDrive/Project/data.yaml",  # dataset configuration
    epochs=150,  # continue training for 150 epochs
    batch=64,  # batch size
    imgsz=640,  # image size
    device=0,  # GPU device 0 (use 0 for CUDA, 0 or "cpu" for CPU)
    resume=True,  # resume from the last checkpoint (last.pt)

    # Save the training output in Google Drive
    project="/content/drive/MyDrive/Project/data.yaml/yolo_saved_runs",  # path in Google Drive
    name="fire_detection_resume_run"  # Folder name for the current training session
)

"""### Need to save last.pt for resume the epoch"""

from ultralytics import YOLO

# Load model from Google Drive checkpoint
model = YOLO("/content/drive/MyDrive/Project/last.pt")

# Train and save results in Google Drive
model.train(
    data="/content/drive/MyDrive/Project/data.yaml",  # dataset configuration
    epochs=150,  # continue training for 150 epochs
    batch=64,  # batch size
    imgsz=640,  # image size
    device=0,  # GPU device 0 (use 0 for CUDA, 0 or "cpu" for CPU)
    resume=True,  # resume from the last checkpoint (last.pt)

    # Save the training output in Google Drive
    project="/content/drive/MyDrive/Project/data.yaml/yolo_saved_runs",  # path in Google Drive
    name="fire_detection_resume_run"  # Folder name for the current training session
)

"""### Creating zip file to Save the best.pt and last.pt model"""

!zip -r /content/drive/MyDrive/Project/runs.zip runs/

"""### Saving The Model"""

!unzip '/content/drive/MyDrive/Project/runs.zip' -d /content/drive/MyDrive/Project

from ultralytics import YOLO

!yolo task=detect mode=val model='/content/drive/MyDrive/Project/best.pt' data='/content/drive/MyDrive/Project/data.yaml'

!yolo task=detect mode=predict model=/content/drive/MyDrive/Project/best.pt conf=0.70 source="/content/drive/MyDrive/Project/test/images"

"""### Prediction"""

!pip install ultralytics

import matplotlib.pyplot as plt
from ultralytics import YOLO

# Load trained YOLO model
model = YOLO('/content/drive/MyDrive/Project/best.pt')

# Run prediction
results = model(input("Enter the Path: "))

# Annotate and convert BGR to RGB
annotated_image = results[0].plot()
annotated_image = annotated_image[..., ::-1]  # Convert BGR to RGB

# Display
plt.imshow(annotated_image)
plt.axis('off')
plt.show()

